<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rastreador de Sinal vs. Ruído</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lucide-static@latest/umd/lucide.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .chart-container {
            position: relative;
            height: 40vh;
            width: 100%;
        }
    </style>
</head>
<body class="bg-gray-900 text-white antialiased">

    <div id="app" class="container mx-auto p-4 md:p-8 max-w-4xl">
        
        <header class="text-center mb-10">
            <h1 class="text-4xl md:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500">Rastreador de Sinal vs. Ruído</h1>
            <p class="text-gray-400 mt-2">Diferencie o que importa do que apenas distrai. Foque no progresso real.</p>
        </header>

        <main class="space-y-8">
            
            <!-- Seção de Definição de Sinais -->
            <section id="signals-section" class="bg-gray-800 p-6 rounded-lg shadow-lg">
                <h2 class="text-2xl font-semibold mb-4 flex items-center">
                    <i data-lucide="compass" class="mr-3 text-blue-400"></i>
                    1. Defina Seus Sinais Principais
                </h2>
                <p class="text-gray-400 mb-4">Quais são as poucas métricas que, se melhorarem, garantem seu progresso? Estes são seus sinais.</p>
                <form id="add-signal-form" class="flex flex-col sm:flex-row gap-2">
                    <input type="text" id="signal-name" placeholder="Ex: Horas de estudo focado" class="flex-grow bg-gray-700 text-white rounded-md p-2 border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none" required>
                    <input type="text" id="signal-unit" placeholder="Unidade (Ex: horas)" class="bg-gray-700 text-white rounded-md p-2 border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none" required>
                    <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors flex items-center justify-center">
                        <i data-lucide="plus-circle" class="mr-2"></i> Adicionar Sinal
                    </button>
                </form>
                <div id="signals-list" class="mt-4 space-y-2">
                    <!-- Sinais definidos pelo usuário serão inseridos aqui -->
                </div>
            </section>

            <!-- Seção de Registro Diário -->
            <section id="log-section" class="bg-gray-800 p-6 rounded-lg shadow-lg">
                <h2 class="text-2xl font-semibold mb-4 flex items-center">
                    <i data-lucide="edit-3" class="mr-3 text-purple-400"></i>
                    2. Registre Suas Atividades
                </h2>
                <form id="add-activity-form" class="space-y-4">
                    <input type="date" id="activity-date" class="w-full bg-gray-700 text-white rounded-md p-2 border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none" required>
                    <textarea id="activity-description" placeholder="O que você fez hoje?" class="w-full bg-gray-700 text-white rounded-md p-2 border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none" required rows="2"></textarea>
                    
                    <div id="signal-value-container" class="hidden space-y-2">
                        <label for="activity-signal-select" class="block text-sm font-medium text-gray-300">Qual sinal esta atividade impactou?</label>
                        <select id="activity-signal-select" class="w-full bg-gray-700 text-white rounded-md p-2 border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none"></select>
                        <input type="number" id="activity-signal-value" placeholder="Valor (Ex: 2.5)" step="any" class="w-full bg-gray-700 text-white rounded-md p-2 border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                    </div>
                    
                    <div class="flex gap-4">
                        <button type="button" id="classify-signal-btn" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-md transition-colors flex items-center justify-center">
                            <i data-lucide="arrow-up-circle" class="mr-2"></i> Classificar como SINAL
                        </button>
                        <button type="button" id="classify-noise-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-md transition-colors flex items-center justify-center">
                            <i data-lucide="zap-off" class="mr-2"></i> Classificar como RUÍDO
                        </button>
                    </div>
                </form>
            </section>

            <!-- Seção de Análise e Gráficos -->
            <section id="analysis-section" class="bg-gray-800 p-6 rounded-lg shadow-lg">
                <h2 class="text-2xl font-semibold mb-4 flex items-center">
                    <i data-lucide="bar-chart-3" class="mr-3 text-yellow-400"></i>
                    3. Analise Seu Progresso
                </h2>
                <div class="mb-4">
                    <label for="chart-signal-select" class="block text-sm font-medium text-gray-300">Mostrar progresso para o sinal:</label>
                    <select id="chart-signal-select" class="w-full sm:w-1/2 bg-gray-700 text-white rounded-md p-2 mt-1 border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none"></select>
                </div>
                <div class="chart-container">
                    <canvas id="progress-chart"></canvas>
                </div>
            </section>

            <!-- Seção de Histórico -->
            <section id="history-section" class="bg-gray-800 p-6 rounded-lg shadow-lg">
                <h2 class="text-2xl font-semibold mb-4 flex items-center">
                    <i data-lucide="history" class="mr-3 text-gray-400"></i>
                    Histórico de Atividades
                </h2>
                <div id="activities-log" class="space-y-3 max-h-96 overflow-y-auto pr-2">
                    <!-- Atividades registradas serão inseridas aqui -->
                </div>
            </section>

        </main>
        
        <footer class="text-center mt-10 text-gray-500">
            <p>Construído para focar no que realmente importa.</p>
        </footer>
    </div>

    <!-- Firebase -->
    <script type="module">
        // Importações do Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, onSnapshot, addDoc, doc, deleteDoc, query, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Configuração e inicialização do Firebase
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-signal-noise-app';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        
        let app, auth, db, userId;
        let signals = [];
        let activities = [];
        let chartInstance = null;

        // Elementos do DOM
        const addSignalForm = document.getElementById('add-signal-form');
        const signalNameInput = document.getElementById('signal-name');
        const signalUnitInput = document.getElementById('signal-unit');
        const signalsList = document.getElementById('signals-list');

        const addActivityForm = document.getElementById('add-activity-form');
        const activityDateInput = document.getElementById('activity-date');
        const activityDescriptionInput = document.getElementById('activity-description');
        const classifySignalBtn = document.getElementById('classify-signal-btn');
        const classifyNoiseBtn = document.getElementById('classify-noise-btn');
        const signalValueContainer = document.getElementById('signal-value-container');
        const activitySignalSelect = document.getElementById('activity-signal-select');
        const activitySignalValueInput = document.getElementById('activity-signal-value');
        
        const chartSignalSelect = document.getElementById('chart-signal-select');
        const activitiesLog = document.getElementById('activities-log');

        // FUNÇÕES DE RENDERIZAÇÃO
        const renderSignals = () => {
            signalsList.innerHTML = '';
            activitySignalSelect.innerHTML = '<option value="">Selecione um sinal</option>';
            chartSignalSelect.innerHTML = '';

            if (signals.length === 0) {
                 signalsList.innerHTML = `<p class="text-gray-500">Nenhum sinal definido ainda. Adicione um acima para começar.</p>`;
            } else {
                signals.forEach(signal => {
                    const signalEl = document.createElement('div');
                    signalEl.className = 'bg-gray-700 p-2 rounded-md flex justify-between items-center';
                    signalEl.innerHTML = `
                        <span>
                            <span class="font-semibold text-blue-300">${signal.name}</span>
                            <span class="text-sm text-gray-400">(${signal.unit})</span>
                        </span>
                        <button data-id="${signal.id}" class="delete-signal-btn text-red-400 hover:text-red-500 transition-colors p-1 rounded-full">
                            <i data-lucide="trash-2" class="w-4 h-4"></i>
                        </button>
                    `;
                    signalsList.appendChild(signalEl);

                    const optionEl = document.createElement('option');
                    optionEl.value = signal.id;
                    optionEl.textContent = signal.name;
                    activitySignalSelect.appendChild(optionEl);

                    const chartOptionEl = optionEl.cloneNode(true);
                    chartSignalSelect.appendChild(chartOptionEl);
                });
            }

            document.querySelectorAll('.delete-signal-btn').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const id = e.currentTarget.dataset.id;
                    await deleteSignal(id);
                });
            });

            if (signals.length > 0) {
                renderChart();
            }
            lucide.createIcons();
        };
        
        const renderActivities = () => {
            activitiesLog.innerHTML = '';
             if (activities.length === 0) {
                 activitiesLog.innerHTML = `<p class="text-gray-500">Nenhuma atividade registrada ainda.</p>`;
                 return;
            }

            const sortedActivities = [...activities].sort((a, b) => new Date(b.date) - new Date(a.date));

            sortedActivities.forEach(activity => {
                const activityEl = document.createElement('div');
                const isSignal = activity.type === 'signal';
                const bgColor = isSignal ? 'bg-green-900/50' : 'bg-red-900/50';
                const icon = isSignal ? '<i data-lucide="arrow-up-circle" class="text-green-400 w-5 h-5 mr-3"></i>' : '<i data-lucide="zap-off" class="text-red-400 w-5 h-5 mr-3"></i>';
                
                let details = '';
                if(isSignal && activity.signalId) {
                    const signal = signals.find(s => s.id === activity.signalId);
                    if(signal) {
                        details = `<span class="text-sm text-gray-400 ml-2">(${activity.value} ${signal.unit} para "${signal.name}")</span>`;
                    }
                }

                activityEl.className = `p-3 rounded-md flex items-start ${bgColor}`;
                activityEl.innerHTML = `
                    ${icon}
                    <div>
                        <p class="font-medium">${activity.description} ${details}</p>
                        <p class="text-xs text-gray-500">${new Date(activity.date).toLocaleDateString('pt-BR', {timeZone: 'UTC'})}</p>
                    </div>
                `;
                activitiesLog.appendChild(activityEl);
            });
            lucide.createIcons();
        };

        const renderChart = () => {
            const selectedSignalId = chartSignalSelect.value;
            if (!selectedSignalId) {
                if(chartInstance) chartInstance.destroy();
                return;
            };

            const signalData = activities
                .filter(a => a.type === 'signal' && a.signalId === selectedSignalId)
                .sort((a, b) => new Date(a.date) - new Date(b.date));

            const labels = signalData.map(a => new Date(a.date).toLocaleDateString('pt-BR', { timeZone: 'UTC' }));
            const data = signalData.map(a => a.value);

            const ctx = document.getElementById('progress-chart').getContext('2d');
            
            if (chartInstance) {
                chartInstance.destroy();
            }

            chartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: signals.find(s => s.id === selectedSignalId)?.name || 'Progresso',
                        data: data,
                        borderColor: 'rgba(96, 165, 250, 1)', // blue-400
                        backgroundColor: 'rgba(96, 165, 250, 0.2)',
                        fill: true,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: { 
                            beginAtZero: true,
                            ticks: { color: '#9ca3af' }, // gray-400
                            grid: { color: '#374151' } // gray-700
                        },
                        x: {
                            ticks: { color: '#9ca3af' },
                            grid: { color: '#374151' }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#d1d5db' // gray-300
                            }
                        }
                    }
                }
            });
        };

        // FUNÇÕES DO FIREBASE
        const setupFirestoreListeners = () => {
            const signalsCollection = collection(db, `artifacts/${appId}/users/${userId}/signals`);
            onSnapshot(query(signalsCollection), (snapshot) => {
                signals = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderSignals();
                renderActivities();
            });

            const activitiesCollection = collection(db, `artifacts/${appId}/users/${userId}/activities`);
            onSnapshot(query(activitiesCollection), (snapshot) => {
                activities = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderActivities();
                renderChart();
            });
        };

        const addSignal = async (name, unit) => {
            try {
                const signalsCollection = collection(db, `artifacts/${appId}/users/${userId}/signals`);
                await addDoc(signalsCollection, { name, unit, createdAt: new Date() });
            } catch (error) {
                console.error("Erro ao adicionar sinal: ", error);
            }
        };

        const deleteSignal = async (id) => {
            try {
                const signalDoc = doc(db, `artifacts/${appId}/users/${userId}/signals`, id);
                await deleteDoc(signalDoc);
            } catch(error) {
                console.error("Erro ao deletar sinal: ", error);
            }
        };

        const addActivity = async (activityData) => {
             try {
                const activitiesCollection = collection(db, `artifacts/${appId}/users/${userId}/activities`);
                await addDoc(activitiesCollection, { ...activityData, createdAt: new Date() });
            } catch (error) {
                console.error("Erro ao adicionar atividade: ", error);
            }
        };

        // LÓGICA DE EVENTOS
        addSignalForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const name = signalNameInput.value.trim();
            const unit = signalUnitInput.value.trim();
            if (name && unit) {
                await addSignal(name, unit);
                signalNameInput.value = '';
                signalUnitInput.value = '';
            }
        });
        
        classifySignalBtn.addEventListener('click', (e) => {
            e.preventDefault();
            signalValueContainer.classList.remove('hidden');
            const description = activityDescriptionInput.value.trim();
            const date = activityDateInput.value;
            const signalId = activitySignalSelect.value;
            const value = parseFloat(activitySignalValueInput.value);

            if (description && date && signalId && !isNaN(value)) {
                addActivity({
                    description,
                    date,
                    type: 'signal',
                    signalId,
                    value
                });
                addActivityForm.reset();
                signalValueContainer.classList.add('hidden');
                activityDateInput.valueAsDate = new Date();
            } else if (activityDescriptionInput.reportValidity() && activityDateInput.reportValidity()) {
                 alert('Por favor, selecione um sinal e insira um valor numérico válido.');
            }
        });

        classifyNoiseBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const description = activityDescriptionInput.value.trim();
            const date = activityDateInput.value;
            if (description && date) {
                addActivity({
                    description,
                    date,
                    type: 'noise'
                });
                addActivityForm.reset();
                signalValueContainer.classList.add('hidden');
                activityDateInput.valueAsDate = new Date();
            } else {
                addActivityForm.reportValidity();
            }
        });

        chartSignalSelect.addEventListener('change', renderChart);


        // INICIALIZAÇÃO
        const initializeAppAndAuth = async () => {
            try {
                if (Object.keys(firebaseConfig).length === 0) {
                    console.log("Configuração do Firebase não encontrada. Usando modo offline ou de demonstração.");
                    return;
                }
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                setLogLevel('debug');

                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        console.log("Usuário autenticado:", userId);
                        setupFirestoreListeners();
                    } else {
                        console.log("Nenhum usuário. Tentando autenticação...");
                        try {
                            if (initialAuthToken) {
                                await signInWithCustomToken(auth, initialAuthToken);
                            } else {
                                await signInAnonymously(auth);
                            }
                        } catch (error) {
                            console.error("Falha na autenticação anônima/customizada: ", error);
                        }
                    }
                });
            } catch (error) {
                console.error("Erro na inicialização do Firebase: ", error);
            }
        };

        // Seta a data de hoje como padrão e inicializa o app
        activityDateInput.valueAsDate = new Date();
        initializeAppAndAuth();
        lucide.createIcons();

    </script>
</body>
</html>
